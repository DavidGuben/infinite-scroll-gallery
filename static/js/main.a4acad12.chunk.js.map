{"version":3,"sources":["components/unsplashimage.js","components/collage.js","App.js","serviceWorker.js","index.js"],"names":["UnsplashImage","url","key","className","src","Collage","React","useState","images","setImages","loaded","setIsLoaded","fetchImages","count","apiRoot","accessKey","axios","get","then","res","data","useEffect","dataLength","next","hasMore","loader","alt","style","marginTop","map","image","index","urls","regular","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kVASeA,EAPO,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,OAClB,yBAAKC,UAAU,aAAaD,IAAKA,GAC/B,yBAAKE,IAAKH,MC0DDI,EAvDD,WAAO,IAAD,EACYC,IAAMC,SAAS,IAD3B,mBACTC,EADS,KACDC,EADC,OAEcH,IAAMC,UAAS,GAF7B,mBAETG,EAFS,KAEDC,EAFC,KAIVC,EAAc,WAAiB,IAAhBC,EAAe,uDAAP,GACnBC,EAAU,2BACVC,EAAY,mEAElBC,IACGC,IADH,UACUH,EADV,oCAC6CC,EAD7C,kBACgEF,IAC7DK,MAAM,SAAAC,GACLV,EAAU,GAAD,mBAAKD,GAAL,YAAgBW,EAAIC,QAC7BT,GAAY,OASpB,OALAL,IAAMe,WAAU,WACZT,MACD,IAIC,yBAAKT,UAAU,sCACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,kBACf,wBAAIA,UAAU,iBAAd,oBACI,wBAAIA,UAAU,cAAd,oCAGJ,kBAAC,IAAD,CACImB,WAAYd,EACZe,KAAM,kBAAMX,EAAY,IACxBY,SAAS,EACTC,OACA,yBACIrB,IAAI,wFACJsB,IAAI,aAGR,yBAAKvB,UAAU,aAAawB,MAAO,CAAEC,UAAW,SAC3ClB,EACGF,EAAOqB,KAAI,SAACC,EAAOC,GAAR,OACP,kBAAC,EAAD,CAAe9B,IAAK6B,EAAME,KAAKC,QAAS/B,IAAK6B,OAC7C,UCnCbG,MATf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.a4acad12.chunk.js","sourcesContent":["import React from 'react';\n\nconst UnsplashImage = ({ url, key }) => (\n    <div className=\"image-item\" key={key} >\n      <img src={url} />\n      \n    </div>\n);\n\nexport default UnsplashImage;","import React from 'react';\nimport axios from 'axios';\nimport './collage.scss';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport UnsplashImage from './unsplashimage';\n\n\nlet Collage = () => {\n    const [images, setImages] = React.useState([]);\n    const [loaded, setIsLoaded] = React.useState(false);\n\n    const fetchImages = (count = 10) => {\n        const apiRoot = \"https://api.unsplash.com\";\n        const accessKey = \"9441dd4a3700e4d30c2044b73650abc8196f3ff0ecd2ef47596599081d3420c4\";\n    \n        axios\n          .get(`${apiRoot}/photos/random?client_id=${accessKey}&count=${count}`)\n          .then (res => {\n            setImages([...images, ...res.data]);\n            setIsLoaded(true);\n          });\n    };\n\n    React.useEffect(() => {\n        fetchImages();\n    }, []);\n\n    // Return JSX\n    return (\n        <div className=\"hero is-fullheight is-bold is-info\">\n        <div className=\"hero-body\">\n            <div className=\"container\">\n            <div className=\"header content\">\n            <h2 className=\"subtitle is-6\">Infinite Gallery</h2>\n                <h1 className=\"title is-1\">\n                Infinite Scroll Unsplash Gallery\n                </h1>\n            <InfiniteScroll\n                dataLength={images}\n                next={() => fetchImages(5)}\n                hasMore={true}\n                loader={\n                <img\n                    src=\"https://res.cloudinary.com/chuloo/image/upload/v1550093026/scotch-logo-gif_jq4tgr.gif\"\n                    alt=\"loading\"\n                />}\n            >\n                <div className=\"image-grid\" style={{ marginTop: \"30px\" }}>\n                    {loaded ? \n                        images.map((image, index) => (\n                            <UnsplashImage url={image.urls.regular} key={index} />\n                        )): \"\"}\n                </div>\n            </InfiniteScroll>\n            </div>\n\n            </div>\n        </div>\n        </div>\n    );\n};\n\nexport default Collage;","import React from 'react';\n\nimport './App.scss';\n\nimport Collage from './components/collage';\nimport UnsplashImage from './components/unsplashimage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Collage />\n      <UnsplashImage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}